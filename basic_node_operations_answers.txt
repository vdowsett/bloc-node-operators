1. Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.

Sort:

Sort takes each line of code, and sorts the content of the file. It supports alphabetic, reveers order, by number, by month, and can remove duplicates.

Output:
```
$ sort commands.js





        done(data);
        if (err) throw err;
    const fileName = fullPath[0];
    done(userInput);
    fs.readFile(fileName, (err, data) => {
    });
break;
break;
case "cat": commandLibrary.cat(userInputArray.slice(1));
case "echo": commandLibrary.echo(userInputArray.slice(1).join(" "));
"cat": function(fullPath) {
"echo": function(userInput) {
//the cat command
//the echo command
process.stdout.write('\nprompt > ');
process.stdout.write(output);
}
},
const command = userInputArray[0];
const userInputArray = userInput.split(" ");
switch (command) {
}
//parses the user input to understand which command was typed
const commandLibrary = {
function done(output) {
function evaluateCmd(userInput) {
module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;
}
}
};
//where we will store our commands
//where we will store the logic of our commands
//write out data
const fs = require("fs");
```

WC:

WC is short for word count. It reads the file and generates the following stats: newline count, word count, byte count.

Output:
```
$ wc commands.js
39     107    1054 commands.js
```

Uniq:

Uniq is a command for reporting or filtering repeated lines in a file. It can remove duplicates, show a count of occurances, show only repeated lines, ignore certain characters and compare specific fields.

Output:
```
$ Uniq commands.js
const fs = require("fs");

//write out data
function done(output) {
process.stdout.write(output);
process.stdout.write('\nprompt > ');
}

//where we will store our commands
function evaluateCmd(userInput) {
//parses the user input to understand which command was typed
const userInputArray = userInput.split(" ");
const command = userInputArray[0];

switch (command) {
case "echo": commandLibrary.echo(userInputArray.slice(1).join(" "));
break;
case "cat": commandLibrary.cat(userInputArray.slice(1));
break;
}
}

//where we will store the logic of our commands
const commandLibrary = {
//the echo command
"echo": function(userInput) {
done(userInput);
},
//the cat command
"cat": function(fullPath) {
const fileName = fullPath[0];
fs.readFile(fileName, (err, data) => {
    if (err) throw err;
    done(data);
});
}
};

module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;
```

2. Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and why the specific data was outputted.

First the file bash.js was sorted, then uniq filtered repeated lines from the file

```
$ sort bash.js | uniq

commands.evaluateCmd(userInput);
userInput = userInput.toString().trim();
//evaluateCmd is a function which will be implemented in commands.js
process.stdin.on('data', (userInput) => {
process.stdout.write('prompt > ');
});
// The stdin 'data' event triggers after a user types in a line
//prompt the user for input
const commands = require("./commands.js");
```

6.

```

function reverseString(inputString) {

var wordSplit = []; 
var reversedWordArray = [];

wordSplit = inputString.split(" ");

wordSplit.forEach( (word) => {
reversedWordArray.push(reverseWord(word));
} );

let reversedString = reversedWordArray.join(" ");
console.log(reversedString);
return reverseString;

}

function reverseWord(word) {
charSplit = word.split("");
charReversed = charSplit.reverse().join("");
return charReversed;
}

reverseString("boom yeaha babies");

```